" dcolli1    

" MOUSE {{{
set mouse=a
" }}}

 " Launch Config {{{
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'jnurmine/Zenburn'
Plugin 'rking/ag.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'mattn/emmet-vim'
Plugin 'sjl/gundo.vim'
Plugin 'Shougo/neocomplcache'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'leafgarland/typescript-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Zuckonit/vim-airline-tomato'
Plugin 'Chiel92/vim-autoformat'
Plugin 'airblade/vim-gitgutter'
Plugin 'jelera/vim-javascript-syntax'
Plugin 'plasticboy/vim-markdown'
Plugin 'severin-lemaignan/vim-minimap'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'tpope/vim-surround'
Plugin 'Shougo/vimproc'
Plugin 'Shougo/vimshell'
Plugin 'ryanoasis/vim-devicons'
Plugin 'flazz/vim-colorschemes'
Plugin 'derekwyatt/vim-scala'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'sjl/vitality.vim'
Plugin 'vim-scripts/LargeFile'

call vundle#end() 
filetype plugin indent on 
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
 
" }}}

" Colors {{{
"set t_Co=256
colorscheme zenburn 
" }}}

" Misc {{{
syntax on
" }}}

" Spaces and Tabs {{{
set tabstop=4							" number of visual spaces per tab
set softtabstop=4						" number of spaces in tab when editing
set expandtab							" ensure tabs are turned into spaces
" }}}

" UI Config {{{
set number							" show linenumbers
set showcmd							" show command in the bottom bar
set cursorline							" highlight the current line
filetype plugin indent on              " load file-type specific indent files
set showmatch							" highlight matching
set laststatus=2						" always show status line
set listchars=nbsp:¬,eol:¶,tab:>-,extends:»,precedes:«,trail:•  "https://wincent.com/blog/making-vim-highlight-suspicious-characters
" }}}

" Commands {{{
:command Bo BufOnly
" For local replace
nnoremap gr gd[{V%::s/<C-R>///gc<left><left><left>
" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>
" View Splitting
" window
nmap <leader>sw<left>  :topleft  vnew<CR>
nmap <leader>sw<right> :botright vnew<CR>
nmap <leader>sw<up>    :topleft  new<CR>
nmap <leader>sw<down>  :botright new<CR>
" buffer
nmap <leader>s<left>   :leftabove  vnew<CR>
nmap <leader>s<right>  :rightbelow vnew<CR>
nmap <leader>s<up>     :leftabove  new<CR>
nmap <leader>s<down>   :rightbelow new<CR>
" }}}

" Searching {{{
let g:neocomplcache_enable_at_startup = 1			" use neocomplcache
let g:neocomplcache#enable_smart_case=1				" use neocomplcache smart case
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"	" TAB completion
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"   " Close and Cancel popup
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
" }}}

" Folding {{{
set foldenable                      " enable folding
set foldlevelstart=10               " open most folds by default
set foldnestmax=10                  " 10 nested folds max!
nnoremap <space> za                 " use space to open folds
set foldmethod=indent               " fold based on indent level
" }}}

" Movement {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" move beginning and end, overwrite existing B, E 
nnoremap B ^ 
nnoremap E $

" highlight the last inserted text
nnoremap gV `[v`]

" ensure backspace works like most other programs
set backspace=2
" }}}

" Leader {{{
let mapleader=","                       " leader is ,  
inoremap jj <esc>                       " make jk <esc> in insert
" save document while in insert
inoremap <leader>w <C-o>:w<CR>
nnoremap <leader>u :GundoToggle<CR>     " visual undo
nnoremap <leader>s :mksession<CR>       " save session becomes ,s
" open search
nnoremap <leader>a :Ag
" open nerdtree
map <leader>n :NERDTreeToggle<CR>
" }}}

" NERDTree {{{
" let g:NERDTreeWinPos = "right"
" }}}

" CtrlP {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
" }}}

" {{{ VIM-gitgutter
"let g:gitgutter_max_signs = 
" }}}

" VIM-Instant-Markdown {{{
let g:instant_markdown_slow = 1
" }}}

" VIM-Markdown {{{
let g:vim_markdown_folding_disabled=1
" }}}

" VIM-Airline {{{
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'
let g:Powerline_dividers_override = [[0xe0b0], [0xe0b1], [0xe0b2], [0xe0b3]]
let g:Powerline_symbols_override = {
  \ 'BRANCH': [0xe238],
  \ 'RO'    : [0xe0a2],
  \ 'FT'    : [0xe1f6],
  \ 'LINE'  : [0xe0a1],
\ }
let g:airline_section_y = '%{getcwd()}'
" }}}

" VIM-Syntastic {{{
" Show warnings in the status line
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"check lines of code and when to lint
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
"}}}

" editorconfig-vim {{{
let g:EditorConfig_core_mode = 'external_command'
let g:EditorConfig_exec_path='/usr/local/bin/editorconfig'
"}}}

" vim-autoformat {{{
let g:formatterpath = '/usr/local/bin/jscs'
" }}}

" vim-minimap {{{
let g:minimap_highlight='Visual'
" }}}

" JscsFix {{{
function! JscsFix()
    "Save current cursor position"
    let l:winview = winsaveview()
    "Pipe the current buffer (%) through the jscs -x command"
    % ! jscs -x
    "Restore cursor position - this is needed as piping the file"
    "through jscs jumps the cursor to the top"
    call winrestview(l:winview)
endfunction
command JscsFix :call JscsFix()
" }}}

" Autocommands {{{
" neocomplcache - enable omni completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
" }}}

" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}

" vim-tomato {{{ 
let g:tomato#remind = " \uf005 "
let g:tomato#restinfo = " \ue1f1 "
let g:tomato#show_clock = 1
let g:tomato#show_count_down = 1
" }}}

" vim-javascript-syntax {{{
    au FileType javascript call JavaScriptFold()
" }}}

set modelines=1
" vim:foldmethod=marker:foldlevel=0
